---
description: 
globs: src/c_certificate.rs
alwaysApply: false
---
---
description: "Rules for the CCertificate class, a data structure used to build the payload for a blockchain certificate. It handles data formatting and supports certificate chaining."
globs:
  - "*src/c_certificate.(js|mjs|cjs|php|py|java|rs|go)"
alwaysApply: true
---

# IMPORTANT: RESTRICTED IMPLEMENTATION NOTICE

**ONLY THE DEFINITIONS AND LOGIC STATED IN THIS DOCUMENT ARE TO BE USED IN THE DESIGNATED MODULE. ALL OTHER LOGIC IS PROHIBITED.**

This document serves as the single source of truth for the CCertificate implementation. Any deviation from the specified structure, methods, or logic is strictly prohibited. This includes:
- Adding new fields or methods not explicitly defined
- Modifying the behavior of existing methods
- Implementing alternative data handling approaches
- Adding additional dependencies beyond those specified

The implementation must exactly match the structure and behavior described in this document.

# CCertificate Class Documentation

## Overview
The CCertificate class is a data structure used to build and format certificate payloads for blockchain certification. It handles data formatting and supports certificate chaining through previous transaction references.

## Required Dependencies
```pseudo
// JSON Processing
REQUIRE json_serializer
REQUIRE json_deserializer

// Character Encoding
REQUIRE utf8_encoding
REQUIRE character_set_utilities

// Data Structures
REQUIRE hash_map
REQUIRE map_utilities

// Core Utilities
REQUIRE helper_utilities
```

## Class Structure

```pseudo
CLASS C_CERTIFICATE
    PRIVATE FIELDS:
        data: STRING           // Hex-encoded data content
        previousTxID: STRING   // Reference to previous transaction
        previousBlock: STRING  // Reference to previous block
        codeVersion: STRING    // Library version

        CONSTRUCTOR:
            INITIALIZE
                SET data TO NULL
                SET previousTxID TO NULL
                SET previousBlock TO NULL
                SET codeVersion TO LIB_VERSION // Initialize with library version constant

    METHODS:
        SET_DATA(input: STRING)
            // Converts input data to hex format
            SET data TO CONVERT_TO_HEX(input)

        GET_DATA(): STRING
            // Converts hex data back to original format
            RETURN CONVERT_FROM_HEX(data)

        GET_JSON_CERTIFICATE(): STRING
            // Creates JSON payload with all certificate data
            CREATE certificate AS MAP
            ADD_TO_MAP(certificate, "data", data) // Use internal hex data directly
            ADD_TO_MAP(certificate, "previousTxID", previousTxID)
            ADD_TO_MAP(certificate, "previousBlock", previousBlock)
            ADD_TO_MAP(certificate, "version", codeVersion) // Use codeVersion field
            RETURN SERIALIZE_TO_JSON(certificate)

        GET_CERTIFICATE_SIZE(): INTEGER
            // Returns size of certificate in bytes (UTF-8)
            TRY
                CREATE certificate_payload AS MAP
                ADD_TO_MAP(certificate_payload, "data", data)
                ADD_TO_MAP(certificate_payload, "previousTxID", previousTxID)
                ADD_TO_MAP(certificate_payload, "previousBlock", previousBlock)
                ADD_TO_MAP(certificate_payload, "version", codeVersion)
                json_data = SERIALIZE_TO_JSON(certificate_payload)
                RETURN LENGTH_OF_BYTES_UTF8(json_data) // Use byte length for UTF-8
            CATCH
                RETURN 0
```

## Usage Guidelines

1. Data Handling:
   - Use SET_DATA(input: STRING) to store data (automatically converts to hex).
   - Use GET_DATA(): STRING to retrieve data (automatically converts from hex).
   - Never access the `data` field directly.

2. Certificate Chaining:
   - The `previousTxID` and `previousBlock` fields are initialized to NULL in the constructor.
   - These fields are included in the JSON payload generated by `GET_JSON_CERTIFICATE()`.
   - The `C_CERTIFICATE` class itself does not provide direct setters for these fields; they are intended to be managed externally or through the `CEPAccount` class's transaction submission process if chaining is supported at that level.

3. JSON Generation:
   - Use GET_JSON_CERTIFICATE(): STRING to generate the final payload.
   - This method includes the `data`, `previousTxID`, `previousBlock`, and `codeVersion` fields.
   - The format is required for blockchain submission.

4. Size Calculation:
   - Use GET_CERTIFICATE_SIZE(): INTEGER to check the payload size.
   - Returns the size in bytes (UTF-8).
   - Handles errors gracefully by returning 0.

## Error Handling

- JSON serialization errors are propagated from GET_JSON_CERTIFICATE()
- Size calculation errors return 0
- Data conversion errors are handled by Helper class

## Dependencies

- Helper utilities for data conversion and version info
- JSON serialization utilities
- UTF-8 encoding utilities

# Guide to Using the C_CERTIFICATE Class

This document explains the role and correct usage of the `CCertificate` class. This class is a data model, not an active component. Its sole purpose is to create a correctly formatted data payload for certification.

## Overall Purpose

The **`CCertificate` class** acts as a blueprint for creating a certificate payload. It is a simple data holder that structures your application data and metadata into a specific JSON format.

This class **does not** communicate with the network, sign data, or perform cryptographic operations. Its only job is to prepare the data payload that will be submitted to the blockchain using the `CEPAccount` class.

---

## Core Concepts & Invariants

### 1. Data Representation

-   **Internal Format**: When you provide data using the **`set data method`**, the class immediately converts it into a **hexadecimal string** for internal storage.
-   **Data Access**: To retrieve the data in its original, human-readable format, you **must** use the **`get data method`**, which converts the hex string back to a regular string.
-   **Prohibited Action**: Do not interact with the internal `data` field directly. Always use the `get data` and `set data` methods to ensure correct hex encoding and decoding, which is handled by the `Helper` class.

### 2. Certificate Chaining

-   The **`previousTxID`** and **`previousBlock`** fields are designed to create a verifiable link to a previously existing certificate on the blockchain.
-   By setting these values, you can form a "chain of evidence," which is useful for tracking the history or evolution of a piece of data.

### 3. The Final JSON Payload

-   The primary output of this class is a **JSON string** generated by the **`get json certificate method`**.
-   This method assembles the data, chaining information, and the library version (from the `Helper` class) into the precise structure required by the network.
-   **Prohibited Action**: Never create this JSON payload manually. Always rely on the `get json certificate method` to guarantee the correct format and prevent submission errors.

---

## How to Use with `CEPAccount`

The `C_CERTIFICATE` and `CEPAccount` classes are designed to work together in a specific sequence:

1.  **Create a Certificate**: First, create a new instance of the `C_CERTIFICATE` class.
    ```pseudo
    certificate = NEW C_CERTIFICATE()
    ```
2.  **Populate the Certificate**: Use the `setData(input: STRING)` method to add your payload. The `previousTxID` and `previousBlock` fields are initialized to `NULL` and are included in the JSON payload. If chaining is required, these values are typically managed by the `CEPAccount` class during transaction submission, not directly set on the `C_CERTIFICATE` instance.
    ```pseudo
    certificate.setData("This is my important data for certification.")
    ```
3.  **Generate the Payload**: Call the `GET_JSON_CERTIFICATE(): STRING` method to produce the final, formatted JSON string.
    ```pseudo
    certificatePayload = certificate.GET_JSON_CERTIFICATE()
    ```
4.  **Submit the Payload**: sPass the resulting `certificatePayload` string to the `submitCertificate(data: STRING, privateKey: STRING)` method of an initialized `CEPAccount` instance.
    ```pseudo
    account.submitCertificate(certificatePayload, privateKey)
    ```
